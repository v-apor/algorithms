Variable: 
    Variables are used to store information to be referenced and manipulated in a computer program. 
    They also provide a way of labeling data with a descriptive name, so our programs can be understood more clearly by the reader and ourselves. 
    It is helpful to think of variables as containers that hold information. 
    Their sole purpose is to label and store data in memory. This data can then be used throughout your program.

Data Type: 
    A data type, in programming, is a classification that specifies which type of value a variable has and what type of mathematical, 
    relational or logical operations can be applied to it without causing an error. 
    A string, for example, is a data type that is used to classify text and an integer is a data type used to classify whole numbers.

    Two Types:
        Primitive data types
            A primitive data type specifies the size and type of variable values, and it has no additional methods.
            Example byte, short, int, long, float, double, boolean and char

        Non-primitive data types
            Non-primitive data types are created by programmers. 
            They are not predefined like primitive data types. 
            These data types are used to store a group of values or several values.
            Non-primitive data types are called reference types because they refer to objects.
            Example String, Arrays and Classes

Abstract Data Types:
    To simplify the process of solving problems, we combine the data structures with their operations
    and we call this Abstract Data Types (ADTs). ADT = Declaration of Data + Declaration of operations(functions)
    Example: Linked Lists, Stacks, Queues, Priority Queues, Binary Tree etc.

Data Structure:
    Data structure is a particular way of storing and organizing data in a computer so that it can be used efficiently. 
    A data structure is a special format for organizing and storing data. 
    General data structure types include arrays, files, linked lists, stacks, queues, trees, graphs and so on.  
    
    Depending on the organization of the elements, data structures are classified into two types:  
        Linear data structures: 
            Elements are accessed in a sequential order but it is not compulsory to store all elements sequentially. 
            Examples: Linked Lists, Stacks and Queues.
        Non Linear DS:
            Elements of this data structure are stored/accessed in a non-linear order. Examples: Trees and graphs.

Algorithm:
    An algorithm is the step-by-step unambiguous instructions to solve a given problem.

    Analysis of Algorithm:
        Why? Algorithm analysis helps us to determine which algorithm is most efficient in terms of time and space consumed.
        The goal of the analysis of algorithms is to compare algorithms (or solutions) mainly in terms of running time 
        but also in terms of other factors (e.g., memory, developer effort, etc.)

    Rate of Growth:
        The rate at which the running time increases as a function of input is called rate of growth.
        Most of the time we analyse rate of growth with respect to increase in input size n.
        Example of rate of growth (refer /Resource/1CommonRuntimeWithExample.png)

Reference:
Book: Data Structures and Algorithms Made Easy - Narasimha Karumanchi
https://launchschool.com/books/ruby/read/variables
https://www.w3schools.com/java/java_data_types.asp
https://www.scientecheasy.com/2020/06/non-primitive-data-types-in-java.html/